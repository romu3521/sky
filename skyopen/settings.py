"""
Django settings for skyopen project.

Generated by 'django-admin startproject' using Django 4.2.11.

"""

from pathlib import Path
import environ,os
import logging
from django.core.exceptions import ImproperlyConfigured


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
env.read_env(os.path.join(BASE_DIR, "../.env"))


DEBUG = env.bool("DEBUG", default=None)  
if DEBUG is None:
    raise ImproperlyConfigured("環境変数 'DEBUG' が設定されていません。")

MAINTENANCE_MODE = env.bool("MAINTENANCE_MODE", default=None)  
if MAINTENANCE_MODE is None:
    raise ImproperlyConfigured("環境変数 'MAINTENANCE_MODE' が設定されていません。")




DOMAIN_NAME = env("DOMAIN_NAME", default=None)
if DOMAIN_NAME is None:
    raise ImproperlyConfigured("環境変数 'DOMAIN_NAME' が設定されていません。")

SECRET_KEY = env("SECRET_KEY", default=None)
if SECRET_KEY is None:
    raise ImproperlyConfigured("環境変数 'SECRET_KEY' が設定されていません。")


try:
    MEDROO=os.environ["MEDROO"]
except Exception as e:
    MEDROO="./media"
    print("error",e)


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'log/django_error.log'),
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'ERROR',
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}




ALLOWED_HOSTS = DOMAIN_NAME.split(",")


INSTALLED_APPS = [
    'rest_framework',
    "basecom.apps.BasecomConfig",
    #"sqapp",
    "linechat.apps.LinechatConfig",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

INSTALLED_APPS += [
    'corsheaders',
]

if "*" in ALLOWED_HOSTS:
    INSTALLED_APPS += ['django_extensions']

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'skyopen.middleware.middleware.MaintenanceModeMiddleware',
]


ROOT_URLCONF = 'skyopen.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                "basecom.context.get_context",
            ],
        },
    },
]

WSGI_APPLICATION = 'skyopen.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

if not DEBUG:
    MEDIA_ROOT = os.path.join(BASE_DIR, MEDROO)
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static',]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
